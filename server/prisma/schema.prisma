// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models
model User {
  id                  String                @id @default(cuid())
  firstName           String
  lastName            String
  email               String                @unique
  password            String?
  emailVerified       DateTime?
  image               String?
  role                Role                  @default(USER)
  status              Status                @default(ACTIVE)
  accounts            Account[]
  VerificationToken   VerificationToken[]
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  ForgotPasswordToken ForgotPasswordToken[]
  SavedVocabulary     SavedVocabulary[]
  UserChapterReview   UserChapterReview[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime
  used       Boolean   @default(false)
  usedAt     DateTime?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)

  @@unique([identifier, token])
}

model ForgotPasswordToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime
  userId     String
  used       Boolean   @default(false)
  usedAt     DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)

  @@unique([identifier, token])
}

// User Profile Models
model SavedVocabulary {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  vocabularyId String
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id])
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)

  @@unique([userId, vocabularyId])
}

model UserChapterReview {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  unitId    String
  unit      Unit     @relation(fields: [unitId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([userId, lessonId])
}

// Lessons and Content Models
model Unit {
  id                String              @id @default(cuid())
  unitNumber        Int                 @default(autoincrement())
  title             String
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  lesson            Lesson[]
  userChapterReview UserChapterReview[]
}

model Lesson {
  id                String              @id @default(cuid())
  title             String
  lessonNumber      Int
  content           Json
  styleVariant      String? // Added in case of styling purposes 
  unitId            String
  unit              Unit                @relation(fields: [unitId], references: [id])
  userChapterReview UserChapterReview[]
  Quiz              Quiz[]
  Vocabulary        Vocabulary[]
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  tag               Tag[]
  lessonVersion     LessonVersion[]

  @@index([unitId, lessonNumber])
}

model LessonVersion {
  id        String   @id @default(cuid())
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  version   Int
  content   Json
  createdAt DateTime @default(now())

  @@unique([lessonId, version])
}

model LessonMedia {
  // Added in case I need to add media, though not sure if I want to use cloud storage or not for media
  id        String   @id @default(cuid())
  url       String
  type      String
  altText   String?
  createdAt DateTime @default(now())
}

model Tag {
  id       String @id @default(cuid())
  name     String @unique
  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id])
}

model Quiz {
  id           String         @id @default(cuid())
  lessonId     String
  lesson       Lesson         @relation(fields: [lessonId], references: [id])
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  QuizQuestion QuizQuestion[]
}

model QuizQuestion {
  id       String   @id @default(cuid())
  question String
  quizId   String
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizType QuizType
  options  Json?
  answer   String
}

model Vocabulary {
  id              String            @id @default(cuid())
  english         String
  korean          String
  definition      String
  lessonId        String
  lesson          Lesson            @relation(fields: [lessonId], references: [id])
  SavedVocabulary SavedVocabulary[]
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
}

// Contact Models
model ContactMessage {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

// Enums
enum QuizType {
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  TRUE_FALSE
  MATCHING
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
