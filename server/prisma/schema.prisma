generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  password            String?
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamptz(6)
  firstName           String
  lastName            String
  role                Role                  @default(USER)
  status              Status                @default(ACTIVE)
  accounts            Account[]
  forgotPasswordToken ForgotPasswordToken[]
  savedVocabulary     SavedVocabulary[]
  userChapterReview   UserChapterReview[]
  userLessonProgress  UserLessonProgress[]
  userQuizAttempt     UserQuizAttempt[]
  verificationToken   VerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  id         String    @id @default(cuid())
  userId     String
  used       Boolean   @default(false)
  usedAt     DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model ForgotPasswordToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime
  userId     String
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  used       Boolean   @default(false)
  usedAt     DateTime?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model SavedVocabulary {
  id           String     @id @default(cuid())
  userId       String
  createdAt    DateTime   @default(now()) @db.Timestamptz(6)
  vocabularyId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vocabulary   Vocabulary @relation(fields: [vocabularyId], references: [id], onDelete: Cascade)

  @@unique([userId, vocabularyId])
}

model UserChapterReview {
  id        String   @id @default(cuid())
  lessonId  String
  userId    String
  unitId    String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  unit      Unit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lessonId])
}

model UserLessonProgress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model UserQuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Int
  passed      Boolean
  attemptedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Unit {
  id                String              @id @default(cuid())
  unitNumber        Int                 @default(autoincrement())
  title             String
  createdAt         DateTime            @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamptz(6)
  lesson            Lesson[]
  userChapterReview UserChapterReview[]
}

model Lesson {
  id                 String               @id @default(cuid())
  title              String
  lessonNumber       Int
  unitId             String
  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  content            Json
  slug               String
  unit               Unit                 @relation(fields: [unitId], references: [id], onDelete: Cascade)
  lessonVersion      LessonVersion[]
  quiz               Quiz[]
  tagging            Tagging[]
  userChapterReview  UserChapterReview[]
  userLessonProgress UserLessonProgress[]
  vocabularyList     VocabularyList?

  @@index([unitId, lessonNumber])
}

model LessonVersion {
  id        String   @id @default(cuid())
  lessonId  String
  version   Int
  content   Json
  createdAt DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([lessonId, version])
  @@index([lessonId])
}

model LessonMedia {
  id        String   @id @default(cuid())
  url       String
  type      String
  altText   String?
  createdAt DateTime @default(now())
}

model Tag {
  id               String    @id @default(cuid())
  name             String    @unique
  backgroundColour String
  textColour       String
  borderColour     String
  tagging          Tagging[]
}

model Tagging {
  id               String          @id @default(cuid())
  tagId            String
  lessonId         String?
  quizId           String?
  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @default(now()) @updatedAt @db.Timestamptz(6)
  vocabularyListId String?
  lesson           Lesson?         @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quiz             Quiz?           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  tag              Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  vocabularyList   VocabularyList? @relation(fields: [vocabularyListId], references: [id], onDelete: Cascade)

  @@index([tagId])
  @@index([lessonId])
  @@index([quizId])
  @@index([vocabularyListId])
}

model Quiz {
  id              String            @id @default(cuid())
  lessonId        String
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  lesson          Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  quizQuestion    QuizQuestion[]
  tagging         Tagging[]
  userQuizAttempt UserQuizAttempt[]
}

model QuizQuestion {
  id       String   @id @default(cuid())
  question String
  quizId   String
  quizType QuizType
  options  Json?
  answer   String
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model VocabularyList {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @default(now()) @updatedAt @db.Timestamptz(6)
  lessonId   String       @unique
  tagging    Tagging[]
  vocabulary Vocabulary[]
  lesson     Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model Vocabulary {
  id               String            @id @default(cuid())
  english          String
  korean           String
  definition       String
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamptz(6)
  vocabularyListId String
  savedVocabulary  SavedVocabulary[]
  vocabularyList   VocabularyList    @relation(fields: [vocabularyListId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  completedAt DateTime?
}

enum QuizType {
  MULTIPLE_CHOICE
  FILL_IN_THE_BLANK
  TRUE_FALSE
  MATCHING
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
}
